import userModel from "../models/user.js";
import passport from "passport";
import jwt from "jsonwebtoken";

function generateJwtToken(user) {
  const payload = {
    sub: user._id,
  };

  return jwt.sign(payload, process.env.SECRETKEY, { expiresIn: "1h" });
}

async function Signup(req, res) {
  try {
    console.log(`Registration Initiated ${JSON.stringify(req.body)}`);

    const existingUser = await userModel.findOne({
      username: req.body.username,
    });

    if (existingUser) {
      console.log(`User already exists`);
      return res.status(400).send(`User exists.`);
    }

    const newUser = await userModel.create({
      name: req.body.name,
      username: req.body.username,
    });

    await newUser.setPassword(req.body.password);
    await newUser.save();

    const token = generateJwtToken(newUser);
    console.log(`Token generated by Signup ${token}`);
    return res.status(201).json({ userId: newUser._id, token: token });
  } catch (error) {
    console.error(`Signup Internal Error ${error}`);
    res.status(500).send(`Internal Server Error`);
  }
}

function Signin(req, res, next) {
  console.log(`Signin Initiated ${req.body.username}`);
  passport.authenticate("local", (err, user, info) => {
    try {
      if (err) {
        console.log(`Signin Internal Error ${err}`);
        return res.status(500).send(`Signin Internal error`);
      }

      if (!user) {
        console.log(`Incorrect Credentials !user .`);
        console.log(info);
        return res.status(401).send("Incorrect Credentials");
      }

      const token = generateJwtToken(user);
      res.cookie("token", token);
      return res.status(200).json({ userId: user._id, token: token });
    } catch (error) {
      console.log(`Signin Internal error ${error}`);
      res.status(400).send("Signin internal error");
    }
  })(req, res, next);
}

async function Signout(req, res) {
  console.log("Signout Initiated");
  try {
    req.logout((err) => {
      if (err) {
        console.log(`Logout Error ${err}`);
        return res.status(500).send("Internal error logging Out");
      }

      console.log("User Logged Out");
      res.status(200).send("User Logged Out");
    });
  } catch (error) {
    console.error(`Error during sign-out: ${error}`);
    res.status(500).send("Internal Server Error");
  }
}

export { Signup, Signin, Signout };
